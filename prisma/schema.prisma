// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  bio       String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  feedPosts     FeedPost[]
  shareLinks    ShareLink[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribers   Subscription[] @relation("Publisher")
  
  // Swipe relations
  swipesGiven   Swipe[] @relation("SwipeGiver")
  swipesReceived Swipe[] @relation("SwipeReceiver")
  
  // Connection relations
  connectionsInitiated Connection[] @relation("ConnectionInitiator")
  connectionsReceived  Connection[] @relation("ConnectionReceiver")

  @@map("users")
}

model FeedPost {
  id          String   @id @default(cuid())
  userId      String
  platform    Platform
  postId      String
  author      String
  content     String
  mediaUrl    String?
  thumbnailUrl String?
  likes       Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  timestamp   DateTime
  viewDuration Int?
  capturedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, postId])
  @@map("feed_posts")
}

model ShareLink {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedBy    String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("share_links")
}

model Subscription {
  id           String   @id @default(cuid())
  subscriberId String
  publisherId  String
  createdAt    DateTime @default(now())

  // Relations
  subscriber User @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  publisher  User @relation("Publisher", fields: [publisherId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, publisherId])
  @@map("subscriptions")
}

model Swipe {
  id         String    @id @default(cuid())
  giverId    String
  receiverId String
  direction  SwipeDirection
  createdAt  DateTime  @default(now())

  // Relations
  giver    User @relation("SwipeGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver User @relation("SwipeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId])
  @@map("swipes")
}

model Connection {
  id          String           @id @default(cuid())
  initiatorId String
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  initiator User @relation("ConnectionInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver  User @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, receiverId])
  @@map("connections")
}

enum Platform {
  TIKTOK
  INSTAGRAM
  TWITTER
}

enum SwipeDirection {
  LEFT
  RIGHT
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
